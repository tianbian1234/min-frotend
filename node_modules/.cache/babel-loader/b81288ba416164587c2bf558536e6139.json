{"ast":null,"code":"var echarts = require('echarts/lib/echarts');\n\nvar layoutUtil = require('echarts/lib/util/layout');\n\nrequire('./WordCloudSeries');\n\nrequire('./WordCloudView');\n\nvar wordCloudLayoutHelper = require('./layout');\n\nif (!wordCloudLayoutHelper.isSupported) {\n  throw new Error('Sorry your browser not support wordCloud');\n} // https://github.com/timdream/wordcloud2.js/blob/c236bee60436e048949f9becc4f0f67bd832dc5c/index.js#L233\n\n\nfunction updateCanvasMask(maskCanvas) {\n  var ctx = maskCanvas.getContext('2d');\n  var imageData = ctx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);\n  var newImageData = ctx.createImageData(imageData);\n  var toneSum = 0;\n  var toneCnt = 0;\n\n  for (var i = 0; i < imageData.data.length; i += 4) {\n    var alpha = imageData.data[i + 3];\n\n    if (alpha > 128) {\n      var tone = imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\n      toneSum += tone;\n      ++toneCnt;\n    }\n  }\n\n  var threshold = toneSum / toneCnt;\n\n  for (var i = 0; i < imageData.data.length; i += 4) {\n    var tone = imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\n    var alpha = imageData.data[i + 3];\n\n    if (alpha < 128 || tone > threshold) {\n      // Area not to draw\n      newImageData.data[i] = 0;\n      newImageData.data[i + 1] = 0;\n      newImageData.data[i + 2] = 0;\n      newImageData.data[i + 3] = 0;\n    } else {\n      // Area to draw\n      // The color must be same with backgroundColor\n      newImageData.data[i] = 255;\n      newImageData.data[i + 1] = 255;\n      newImageData.data[i + 2] = 255;\n      newImageData.data[i + 3] = 255;\n    }\n  }\n\n  ctx.putImageData(newImageData, 0, 0);\n}\n\necharts.registerLayout(function (ecModel, api) {\n  ecModel.eachSeriesByType('wordCloud', function (seriesModel) {\n    var gridRect = layoutUtil.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n    var data = seriesModel.getData();\n    var canvas = document.createElement('canvas');\n    canvas.width = gridRect.width;\n    canvas.height = gridRect.height;\n    var ctx = canvas.getContext('2d');\n    var maskImage = seriesModel.get('maskImage');\n\n    if (maskImage) {\n      try {\n        ctx.drawImage(maskImage, 0, 0, canvas.width, canvas.height);\n        updateCanvasMask(canvas);\n      } catch (e) {\n        console.error('Invalid mask image');\n        console.error(e.toString());\n      }\n    }\n\n    var sizeRange = seriesModel.get('sizeRange');\n    var rotationRange = seriesModel.get('rotationRange');\n    var valueExtent = data.getDataExtent('value');\n    var DEGREE_TO_RAD = Math.PI / 180;\n    var gridSize = seriesModel.get('gridSize');\n    wordCloudLayoutHelper(canvas, {\n      list: data.mapArray('value', function (value, idx) {\n        var itemModel = data.getItemModel(idx);\n        return [data.getName(idx), itemModel.get('textStyle.normal.textSize', true) || echarts.number.linearMap(value, valueExtent, sizeRange), idx];\n      }).sort(function (a, b) {\n        // Sort from large to small in case there is no more room for more words\n        return b[1] - a[1];\n      }),\n      fontFamily: seriesModel.get('textStyle.normal.fontFamily') || seriesModel.get('textStyle.emphasis.fontFamily') || ecModel.get('textStyle.fontFamily'),\n      fontWeight: seriesModel.get('textStyle.normal.fontWeight') || seriesModel.get('textStyle.emphasis.fontWeight') || ecModel.get('textStyle.fontWeight'),\n      gridSize: gridSize,\n      ellipticity: gridRect.height / gridRect.width,\n      minRotation: rotationRange[0] * DEGREE_TO_RAD,\n      maxRotation: rotationRange[1] * DEGREE_TO_RAD,\n      clearCanvas: !maskImage,\n      rotateRatio: 1,\n      rotationStep: seriesModel.get('rotationStep') * DEGREE_TO_RAD,\n      drawOutOfBound: seriesModel.get('drawOutOfBound'),\n      shuffle: false,\n      shape: seriesModel.get('shape')\n    });\n\n    function onWordCloudDrawn(e) {\n      var item = e.detail.item;\n\n      if (e.detail.drawn && seriesModel.layoutInstance.ondraw) {\n        e.detail.drawn.gx += gridRect.x / gridSize;\n        e.detail.drawn.gy += gridRect.y / gridSize;\n        seriesModel.layoutInstance.ondraw(item[0], item[1], item[2], e.detail.drawn);\n      }\n    }\n\n    canvas.addEventListener('wordclouddrawn', onWordCloudDrawn);\n\n    if (seriesModel.layoutInstance) {\n      // Dispose previous\n      seriesModel.layoutInstance.dispose();\n    }\n\n    seriesModel.layoutInstance = {\n      ondraw: null,\n      dispose: function dispose() {\n        canvas.removeEventListener('wordclouddrawn', onWordCloudDrawn); // Abort\n\n        canvas.addEventListener('wordclouddrawn', function (e) {\n          // Prevent default to cancle the event and stop the loop\n          e.preventDefault();\n        });\n      }\n    };\n  });\n});\necharts.registerPreprocessor(function (option) {\n  var series = (option || {}).series;\n  !echarts.util.isArray(series) && (series = series ? [series] : []);\n  var compats = ['shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\n  echarts.util.each(series, function (seriesItem) {\n    if (seriesItem && seriesItem.type === 'wordCloud') {\n      var textStyle = seriesItem.textStyle || {};\n      compatTextStyle(textStyle.normal);\n      compatTextStyle(textStyle.emphasis);\n    }\n  });\n\n  function compatTextStyle(textStyle) {\n    textStyle && echarts.util.each(compats, function (key) {\n      if (textStyle.hasOwnProperty(key)) {\n        textStyle['text' + echarts.format.capitalFirst(key)] = textStyle[key];\n      }\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}