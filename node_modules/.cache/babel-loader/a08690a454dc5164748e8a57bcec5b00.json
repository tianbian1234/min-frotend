{"ast":null,"code":"var _jsxFileName = \"/Users/a/min_frotend/src/components/listItem/index.js\";\nimport React, { useImperativeHandle, useRef } from 'react';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\nvar style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\nvar Card = React.forwardRef(function (_ref, ref) {\n  var text = _ref.text,\n      isDragging = _ref.isDragging,\n      connectDragSource = _ref.connectDragSource,\n      connectDropTarget = _ref.connectDropTarget;\n  var elementRef = useRef(null);\n  connectDragSource(elementRef);\n  connectDropTarget(elementRef);\n  var opacity = isDragging ? 0 : 1;\n  useImperativeHandle(ref, function () {\n    return {\n      getNode: function getNode() {\n        return elementRef.current;\n      }\n    };\n  });\n  return React.createElement(\"div\", {\n    ref: elementRef,\n    style: Object.assign({}, style, {\n      opacity: opacity\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, text);\n});\nexport default DropTarget(ItemTypes.CARD, {\n  hover: function hover(props, monitor, component) {\n    if (!component) {\n      return null;\n    } // node = HTML Div element from imperative API\n\n\n    var node = component.getNode();\n\n    if (!node) {\n      return null;\n    }\n\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index;\n    console.log(\"eeeeeeeeee\", dragIndex, hoverIndex); // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Determine rectangle on screen\n\n\n    var hoverBoundingRect = node.getBoundingClientRect(); // Get vertical middle\n\n    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n    var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n    var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    } // Dragging upwards\n\n\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n}, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n})(DragSource(ItemTypes.CARD, {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index\n    };\n  }\n}, function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n})(Card));","map":{"version":3,"sources":["/Users/a/min_frotend/src/components/listItem/index.js"],"names":["React","useImperativeHandle","useRef","DragSource","DropTarget","ItemTypes","style","border","padding","marginBottom","backgroundColor","cursor","Card","forwardRef","ref","text","isDragging","connectDragSource","connectDropTarget","elementRef","opacity","getNode","current","Object","assign","CARD","hover","props","monitor","component","node","dragIndex","getItem","index","hoverIndex","console","log","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","moveCard","connect","dropTarget","beginDrag","id","dragSource"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,mBAAhB,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,WAAvC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,iBADE;AAEVC,EAAAA,OAAO,EAAE,aAFC;AAGVC,EAAAA,YAAY,EAAE,OAHJ;AAIVC,EAAAA,eAAe,EAAE,OAJP;AAKVC,EAAAA,MAAM,EAAE;AALE,CAAd;AAQA,IAAMC,IAAI,GAAGZ,KAAK,CAACa,UAAN,CACT,gBAA2DC,GAA3D,EAAmE;AAAA,MAAjEC,IAAiE,QAAjEA,IAAiE;AAAA,MAA3DC,UAA2D,QAA3DA,UAA2D;AAAA,MAA/CC,iBAA+C,QAA/CA,iBAA+C;AAAA,MAA5BC,iBAA4B,QAA5BA,iBAA4B;AAC/D,MAAMC,UAAU,GAAGjB,MAAM,CAAC,IAAD,CAAzB;AACAe,EAAAA,iBAAiB,CAACE,UAAD,CAAjB;AACAD,EAAAA,iBAAiB,CAACC,UAAD,CAAjB;AACA,MAAMC,OAAO,GAAGJ,UAAU,GAAG,CAAH,GAAO,CAAjC;AACAf,EAAAA,mBAAmB,CAACa,GAAD,EAAM;AAAA,WAAO;AAC5BO,MAAAA,OAAO,EAAE;AAAA,eAAMF,UAAU,CAACG,OAAjB;AAAA;AADmB,KAAP;AAAA,GAAN,CAAnB;AAGA,SACI;AAAK,IAAA,GAAG,EAAEH,UAAV;AAAsB,IAAA,KAAK,EAAEI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlB,KAAlB,EAAyB;AAAEc,MAAAA,OAAO,EAAPA;AAAF,KAAzB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,IADL,CADJ;AAKH,CAdQ,CAAb;AAiBA,eAAeX,UAAU,CACrBC,SAAS,CAACoB,IADW,EAErB;AACIC,EAAAA,KADJ,iBACUC,KADV,EACiBC,OADjB,EAC0BC,SAD1B,EACqC;AAC7B,QAAI,CAACA,SAAL,EAAgB;AACZ,aAAO,IAAP;AACH,KAH4B,CAI7B;;;AACA,QAAMC,IAAI,GAAGD,SAAS,CAACR,OAAV,EAAb;;AACA,QAAI,CAACS,IAAL,EAAW;AACP,aAAO,IAAP;AACH;;AACD,QAAMC,SAAS,GAAGH,OAAO,CAACI,OAAR,GAAkBC,KAApC;AACA,QAAMC,UAAU,GAAGP,KAAK,CAACM,KAAzB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,SAA1B,EAAqCG,UAArC,EAX6B,CAY7B;;AACA,QAAIH,SAAS,KAAKG,UAAlB,EAA8B;AAC1B;AACH,KAf4B,CAgB7B;;;AACA,QAAMG,iBAAiB,GAAGP,IAAI,CAACQ,qBAAL,EAA1B,CAjB6B,CAkB7B;;AACA,QAAMC,YAAY,GAClB,CAACF,iBAAiB,CAACG,MAAlB,GAA2BH,iBAAiB,CAACI,GAA9C,IAAqD,CADrD,CAnB6B,CAqB7B;;AACA,QAAMC,YAAY,GAAGd,OAAO,CAACe,eAAR,EAArB,CAtB6B,CAuB7B;;AACA,QAAMC,YAAY,GAAGF,YAAY,CAACG,CAAb,GAAiBR,iBAAiB,CAACI,GAAxD,CAxB6B,CAyB7B;AACA;AACA;AACA;;AACA,QAAIV,SAAS,GAAGG,UAAZ,IAA0BU,YAAY,GAAGL,YAA7C,EAA2D;AACvD;AACH,KA/B4B,CAgC7B;;;AACA,QAAIR,SAAS,GAAGG,UAAZ,IAA0BU,YAAY,GAAGL,YAA7C,EAA2D;AACvD;AACH,KAnC4B,CAoC7B;;;AACAZ,IAAAA,KAAK,CAACmB,QAAN,CAAef,SAAf,EAA0BG,UAA1B,EArC6B,CAsC7B;AACA;AACA;AACA;;AACAN,IAAAA,OAAO,CAACI,OAAR,GAAkBC,KAAlB,GAA0BC,UAA1B;AACH;AA5CL,CAFqB,EAgDrB,UAAAa,OAAO;AAAA,SAAK;AACR7B,IAAAA,iBAAiB,EAAE6B,OAAO,CAACC,UAAR;AADX,GAAL;AAAA,CAhDc,CAAV,CAoDX7C,UAAU,CACNE,SAAS,CAACoB,IADJ,EAEN;AACEwB,EAAAA,SAAS,EAAE,mBAAAtB,KAAK;AAAA,WAAK;AACnBuB,MAAAA,EAAE,EAAEvB,KAAK,CAACuB,EADS;AAEnBjB,MAAAA,KAAK,EAAEN,KAAK,CAACM;AAFM,KAAL;AAAA;AADlB,CAFM,EAQN,UAACc,OAAD,EAAUnB,OAAV;AAAA,SAAuB;AACrBX,IAAAA,iBAAiB,EAAE8B,OAAO,CAACI,UAAR,EADE;AAErBnC,IAAAA,UAAU,EAAEY,OAAO,CAACZ,UAAR;AAFS,GAAvB;AAAA,CARM,CAAV,CAYIJ,IAZJ,CApDW,CAAf","sourcesContent":["import React, { useImperativeHandle, useRef } from 'react'\nimport { DragSource, DropTarget } from 'react-dnd'\nimport ItemTypes from './ItemTypes'\n\nconst style = {\n    border: '1px dashed gray',\n    padding: '0.5rem 1rem',\n    marginBottom: '.5rem',\n    backgroundColor: 'white',\n    cursor: 'move'\n}\n\nconst Card = React.forwardRef(\n    ({text, isDragging, connectDragSource, connectDropTarget}, ref) => {\n        const elementRef = useRef(null)\n        connectDragSource(elementRef)\n        connectDropTarget(elementRef)\n        const opacity = isDragging ? 0 : 1\n        useImperativeHandle(ref, () => ({\n            getNode: () => elementRef.current\n        }))\n        return (\n            <div ref={elementRef} style={Object.assign({}, style, { opacity })}>\n                {text}\n            </div>\n        )\n    }\n)\n\nexport default DropTarget(\n    ItemTypes.CARD,\n    {\n        hover(props, monitor, component) {\n            if (!component) {\n                return null\n            }\n            // node = HTML Div element from imperative API\n            const node = component.getNode()\n            if (!node) {\n                return null\n            }\n            const dragIndex = monitor.getItem().index\n            const hoverIndex = props.index\n            console.log(\"eeeeeeeeee\", dragIndex, hoverIndex);\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return\n            }\n            // Determine rectangle on screen\n            const hoverBoundingRect = node.getBoundingClientRect()\n            // Get vertical middle\n            const hoverMiddleY =\n            (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset()\n            // Get pixels to the top\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return\n            }\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return\n            }\n            // Time to actually perform the action\n            props.moveCard(dragIndex, hoverIndex)\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            monitor.getItem().index = hoverIndex\n        }\n    },\n    connect => ({\n        connectDropTarget: connect.dropTarget(),\n    }),\n)(\n    DragSource(\n        ItemTypes.CARD,\n        {\n          beginDrag: props => ({\n            id: props.id,\n            index: props.index,\n          }),\n        },\n        (connect, monitor) => ({\n          connectDragSource: connect.dragSource(),\n          isDragging: monitor.isDragging(),\n        }),\n      )(Card),\n)"]},"metadata":{},"sourceType":"module"}